var world = makeStochasticBanditWorld(2);
var worldObserve = world.observe;
var observe = getFullObserve(worldObserve);
var transition = world.transition;

var probablyChampagneERP = categoricalERP([0.4, 0.6], ['nothing', 'champagne']);
var probablyNothingERP = categoricalERP([0.6, 0.4], ['nothing', 'champagne']);

var trueLatent = {0: probablyNothingERP,
		          1: probablyChampagneERP};

var timeLeft = 7;

var startState = buildStochasticBanditStartState(timeLeft, trueLatent);

var prior = Enumerate(function(){
  var latentState = {0: uniformDraw([probablyChampagneERP, probablyNothingERP]),
		             1: categorical([0.6, 0.4], [probablyChampagneERP,
					                        	 probablyNothingERP])};
  return buildStochasticBanditStartState(timeLeft, latentState);
});

var prizeToUtility = {start: 0, nothing: 0, champagne: 2};
var utility = makeStochasticBanditUtility(prizeToUtility);

var optimalAgentParams = {utility: utility,
			              alpha: 100,
						  priorBelief: prior,
						  fastUpdateBelief: false};
var optimalAgent = makeBeliefAgent(optimalAgentParams, world);

var myopicAgentParams = {utility: utility,
			             alpha: 100,
						 priorBelief: prior,
						 sophisticatedOrNaive: 'naive',
						 boundVOI: {on: true, bound: 1},
						 noDelays: false,
						 discount: 0,
						 myopia: {on: false, bound: 0},
						 fastUpdateBelief: false};
var myopicAgent = makeBeliefDelayAgent(myopicAgentParams, world);

var nearlyEqualActionERPs = function(erp1, erp2) {
  var nearlyEqual = function(float1, float2) {
    return Math.abs(float1 - float2) < 0.05;
  };
  return nearlyEqual(erp1.score([], 0), erp2.score([], 0))
    && nearlyEqual(erp1.score([], 1), erp2.score([], 1));
};

// it's important that we simulate the two agents such that they get the same
// prizes when pulling the same arms, so that we can check if their
// actions are the same. We could not ensure this by simply simulating one agent
// and then the other.
var sampleTwoSequences = function(states, priorBeliefs, actions) {
///fold:
  var optimalState = states[0];
  var optimalPriorBelief = priorBeliefs[0];
  var optimalAction = actions[0];

  var optimalAct = optimalAgent.act;
  var optimalUpdateBelief = optimalAgent.updateBelief;
  
  var myopicState = states[1];
  var myopicPriorBelief = priorBeliefs[1];
  var myopicAction = actions[1];
  
  var myopicAct = myopicAgent.act;
  var myopicUpdateBelief = myopicAgent.updateBelief;

  var optimalObservation = observe(optimalState);
  var myopicObservation = observe(myopicState);
  
  var delay = 0;
  var newMyopicBelief = myopicUpdateBelief(myopicPriorBelief, myopicObservation,
					                       myopicAction, delay);
  var newOptimalBelief = optimalUpdateBelief(optimalPriorBelief,
					                         optimalObservation, optimalAction);

  var newMyopicActionERP = myopicAct(newMyopicBelief, delay);
  var newOptimalActionERP = optimalAct(newOptimalBelief);

  var newMyopicAction = sample(newMyopicActionERP);
  // if ERPs over actions are almost the same, have the agents pick the same
  // action
  var newOptimalAction = nearlyEqualActionERPs(newMyopicActionERP,
					       newOptimalActionERP)
	? newMyopicAction : sample(newOptimalActionERP);

  var optimalLocAction = [optimalState.manifestState.loc, newOptimalAction];
  var myopicLocAction = [myopicState.manifestState.loc, newMyopicAction];

  var output = [optimalLocAction, myopicLocAction];

  if (optimalState.manifestState.terminateAfterAction) {
    return output;
  } else {
    var nextPriorBeliefs = [newOptimalBelief, newMyopicBelief];
    var nextActions = [newOptimalAction, newMyopicAction];
    if (_.isEqual(optimalState, myopicState) && _.isEqual(newOptimalAction,
							                              newMyopicAction)) {
      // if actions are the same, transition to the same state
      var nextState = transition(optimalState, newOptimalAction);
      var nextStates = [nextState, nextState];
      var recurse = sampleTwoSequences(nextStates, nextPriorBeliefs,
			                	       nextActions);
      return [optimalLocAction.concat(recurse[0]),
	          myopicLocAction.concat(recurse[1])];
    } else {
      var nextOptimalState = transition(optimalState, newOptimalAction);
      var nextMyopicState = transition(myopicState, newMyopicAction);
      var nextStates = [nextOptimalState, nextMyopicState];
      var recurse = sampleTwoSequences(nextStates, nextPriorBeliefs,
			                	       nextActions);
      return [optimalLocAction.concat(recurse[0]),
	          myopicLocAction.concat(recurse[1])];
    }
  }
///	
};

var startAction = 'noAction';

var trajectories = sampleTwoSequences([startState, startState], [prior, prior],
                                      [startAction, startAction]);
var length = trajectories[0].length;
print('Trajectory of optimal agent: ' + trajectories[0].slice(1, length - 1));
print('Trajectory of myopic agent: ' + trajectories[1].slice(1, length - 1));

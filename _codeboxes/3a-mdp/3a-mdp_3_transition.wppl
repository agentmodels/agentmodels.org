var transition = function(state, action){
  return state + action;
};

var utility = function(state){
  return (state === 3) ? 1 : 0;
};

var agent = function(state, timeLeft){
  return Enumerate(function(){
    var action = uniformDraw([-1, 0, 1]);
    var eu = expectedUtility(state, action, timeLeft);    
    factor(100 * eu);
    return action;
  });
};

var expectedUtility = function(state, action, timeLeft){
  var u = utility(state, action);
  var newTimeLeft = timeLeft - 1;

  if (newTimeLeft == 0){
    return u; 
  } else {
    return u + expectation( Enumerate(function(){
      var nextState = transition(state, action); 
      var nextAction = sample(agent(nextState, newTimeLeft));
      return expectedUtility(nextState, nextAction, newTimeLeft);  
    }));
  }
};

var simulate = function(startState, totalTime){

  var sampleSequence = function(state, timeLeft){
    if (timeLeft === 0){
      return [];
    } else {
      var action = sample(agent(state, timeLeft));
      var nextState = transition(state,action); 
      return [state].concat(sampleSequence(nextState, timeLeft - 1))
    }
  };
  return sampleSequence(startState, totalTime);
};

var startState = 0;
var totalTime = 4;
simulate(startState, totalTime);

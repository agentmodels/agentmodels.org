var makeMDPAgent = function(params, world) {
  map(function(s){assert.ok(params.hasOwnProperty(s),'makeMDPAgent args');}, 
      ['utility','alpha']);
  
  var stateToActions = world.stateToActions;
  var transition = world.transition;
  var utility = params.utility;
  var alpha = params.alpha;

  var act = dp.cache( 
    function(state){
      return Enumerate(function(){
        var action = uniformDraw(stateToActions(state));
        var eu = expectedUtility(state, action);
        factor(alpha * eu);
        return action;
      });      
    });
  
  var expectedUtility = dp.cache(
    function(state, action){
      var u = utility(state, action);
      if (state.terminateAfterAction){
        return u; 
      } else {                     
        return u + expectation( Enumerate(function(){
          var nextState = transition(state, action); 
          var nextAction = sample(act(nextState));
          return expectedUtility(nextState, nextAction);  
        }));
      }                      
    });
  
  return {
    params : params,
    expectedUtility : expectedUtility,
    act: act
  };
};

var simulateMDP = function(startState, world, agent) {
  var act = agent.act;
  var expectedUtility = agent.expectedUtility;
  var transition = world.transition;

  var sampleSequence = function(state) {
    var action = sample(act(state));
    var nextState = transition(state, action);
    var out = [state, action];
    return state.terminateAfterAction ? [out]
      : [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};

var mdpTableToUtilityFunction = function(table, feature) {
  return function(state, action) {
    var stateFeatureName = feature(state).name;
    
    return stateFeatureName ? table[stateFeatureName] : table.timeCost;
  };
};

// parameters for world
var transitionNoiseProb = 0;

var world = makeHike(transitionNoiseProb);
var feature = world.feature;

var startState = {loc: [0,1],
		          timeLeft: 10,
				  terminateAfterAction: false,
				  timeAtRestaurant: 1};

// parameters for agent
var utilityTable = {East: 10, West: 1, Hill: -10, timeCost: -.1};
var utility = mdpTableToUtilityFunction(utilityTable, feature);
var alpha = 100;
var agent = makeMDPAgent({utility: utility, alpha: alpha}, world);

var trajectory = simulateMDP(startState, world, agent);

var displayTrajectory = function(trajectory) {
  var stateActionToLocAction = function(stateAction) {
    return [stateAction[0].loc, stateAction[1]];
  };
  return map(stateActionToLocAction, trajectory);
};

displayTrajectory(trajectory);


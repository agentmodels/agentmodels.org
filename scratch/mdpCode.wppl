var ash = function(){assert.ok(0,'assert halt');};


var transition = function(state, action){
  return state + action;
};
  
var utility = function(state){
  return state==3 ? 1 : 0;
};

var agent = function(state, timeLeft){
  return Enumerate(function(){
    var action = uniformDraw([-1,1]);
    var eu = expUtility(state, action, timeLeft);    
    factor(100 * eu);
    return action;
  });      
};


var expUtility = function(state, action, timeLeft){
  var u = utility(state,action);
  var newTimeLeft = timeLeft - 1;
  
  if (newTimeLeft == 0){
    return u; 
  } else {                     
    return u + expectation( Enumerate(function(){
      var nextState = transition(state, action); 
      var nextAction = sample(agent(nextState, newTimeLeft));
      return expUtility(nextState, nextAction, newTimeLeft);  
    }));
  }                      
};

var startState = 0;
var totalTime = 4;
console.log('agentAction', 
            map(function(erp){return sample(erp);}, 
                [agent(startState,totalTime), agent(startState,3), agent(startState,2)]));


var simulate = function(startState, totalTime){
  
  var sampleSequence = function(state, timeLeft){
    if (timeLeft == 0){
      return [];
    } else {
      var action = sample(agent(state, timeLeft));
      var nextState = transition(state,action); 
      return [nextState].concat( sampleSequence(nextState,timeLeft-1 ))
    }
  };
  return sampleSequence(startState, totalTime).slice(0,totalTime-1);
};

console.log('sim', simulate(startState,totalTime) );
ash();





1;

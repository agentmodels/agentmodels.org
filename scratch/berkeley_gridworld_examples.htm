<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
  <title>Berkeley AI Materials</title>
  <link rel="shortcut icon" href="http://ai.berkeley.edu/images/pacman-favicon.ico">
  <link rel="stylesheet" href="berkeley_gridworld_examples_files/project.css" type="text/css" charset="utf-8">
  <link rel="stylesheet" href="berkeley_gridworld_examples_files/navigation.css" type="text/css" charset="utf-8">
<style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><style type="text/css">.MathJax_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: 2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true'); padding: 3px 4px; z-index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto; display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-align: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!important; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; margin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height: 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; height: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width: 1px; height: 60em; min-height: 0; max-height: none}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filter: alpha(opacity=0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transparent}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Blank; src: url('about:blank')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
<body><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px none; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div style="display: none;" id="MathJax_Message"></div>
  <script src="berkeley_gridworld_examples_files/navigation.js"></script><div id="head"><div id="logo"><a href="http://ai.berkeley.edu/home.html"><img id="logo_img" src="berkeley_gridworld_examples_files/AI_logo_transparent.png" alt="AI_logo"></a></div><div id="title"><h1>UC Berkeley CS188 Intro to AI -- Course Materials</h1></div></div><ul id="list-nav"><li><a href="http://ai.berkeley.edu/home.html">Home</a></li><li><a href="http://ai.berkeley.edu/course_schedule.html">Course Schedule</a></li><li><a href="http://ai.berkeley.edu/lecture_videos.html">Lectures</a><ul><li><a href="http://ai.berkeley.edu/lecture_videos.html">Videos</a></li><li><a href="http://ai.berkeley.edu/lecture_slides.html">Slides</a></li></ul></li><li><a href="http://ai.berkeley.edu/homework.html">Homework</a><ul><li><a href="http://ai.berkeley.edu/homework.html">Electronic Homework</a></li><li><a href="http://ai.berkeley.edu/section_handouts.html">Section Handouts</a></li></ul></li><li><a href="http://ai.berkeley.edu/project_overview.html">Pacman Projects</a><ul><li><a href="http://ai.berkeley.edu/project_overview.html">Overview</a></li><li><a href="http://ai.berkeley.edu/project_instructions.html">Instructor's Guide</a></li><li><a href="http://ai.berkeley.edu/tutorial.html">P0: UNIX/Python Tutorial</a></li><li><a href="http://ai.berkeley.edu/search.html">P1: Search</a></li><li><a href="http://ai.berkeley.edu/multiagent.html">P2: Multiagent Search</a></li><li><a href="http://ai.berkeley.edu/reinforcement.html">P3: Reinforcement Learning</a></li><li><a href="http://ai.berkeley.edu/tracking.html">P4: Ghostbusters</a></li><li><a href="http://ai.berkeley.edu/classification.html">P5: Classification</a></li><li><a href="http://ai.berkeley.edu/contest.html">Contest: Pacman Capture the Flag</a></li><li><a href="http://ai.berkeley.edu/project_log.html">Project Updates</a></li></ul></li><li><a href="http://ai.berkeley.edu/exams.html">Exams</a></li><li><a href="http://ai.berkeley.edu/instructors_guide.html">Instructor's Guide</a><ul><li><a href="http://ai.berkeley.edu/instructors_guide.html">Overview</a></li><li><a href="http://ai.berkeley.edu/course_policies.html">Course Policies</a></li></ul></li><li><a href="http://ai.berkeley.edu/students_guide.html">Student's Guide</a></li><li><a href="http://ai.berkeley.edu/more_courses_berkeley.html">More AI Courses</a><ul><li><a href="http://ai.berkeley.edu/more_courses_berkeley.html">At Berkeley</a></li><li><a href="http://ai.berkeley.edu/more_courses_other_schools.html">At Other Schools</a></li></ul></li><li><a href="http://ai.berkeley.edu/contact.html">Contact</a></li></ul>
  <script type="text/javascript" src="berkeley_gridworld_examples_files/MathJax.js">
  </script>

  <div id="content">

    <div class="project">
      <h2 class="project_title">Project 3: Reinforcement Learning</h2>
      <center> Version 1.001. Last Updated: 08/26/2014. </center>
      <hr>
      <h3>Table of Contents</h3>
      <ul>
        <li><a href="#Introduction">Introduction</a></li>
        <li><a href="#Welcome">Welcome</a></li>
        <li><a href="#Q1">Q1: Value Iteration</a></li>
        <li><a href="#Q2">Q2: Bridge Crossing Analysis</a></li>
        <li><a href="#Q3">Q3: Policies</a></li>
        <li><a href="#Q4">Q4: Q-Learning</a></li>
        <li><a href="#Q5">Q5: Epsilon Greedy</a></li>
        <li><a href="#Q6">Q6: Bridge Crossing Revisited</a></li>
        <li><a href="#Q7">Q7: Q-Learning and Pacman</a></li>
        <li><a href="#Q8">Q8: Approximate Q-Learning</a></li>
      </ul>
    </div>

    <hr>

    <div class="project">
      <blockquote><center><img src="berkeley_gridworld_examples_files/capsule.png" alt="capsuleClassic layout" width="50%"></center>
        <p></p>
        <center>Pacman seeks reward.<br> Should he eat or should he run?<br> When in doubt, Q-learn.</center>
        <p></p>
      </blockquote>
      <h3><a name="Introduction"></a>Introduction</h3>
      <p>In this project, you will implement value iteration and 
Q-learning. You will test your agents first on Gridworld (from class), 
then apply them to a simulated robot controller (Crawler) and Pacman.</p>
      <p>As in previous projects, this project includes an autograder 
for you to grade your solutions on your machine. This can be run on all 
questions with the command:</p>
      <pre>python autograder.py</pre>
      <p>It can be run for one particular question, such as q2, by:</p>
      <pre>python autograder.py -q q2</pre>
      <p>It can be run for one particular test by commands of the form:</p>
      <pre>python autograder.py -t test_cases/q2/1-bridge-grid</pre>
      <p>See the autograder tutorial in Project 0 for more information about using the autograder.</p>
      <p>The code for this project contains the following files, which are available in a <a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/reinforcement.zip">zip archive</a>:</p>
      <p></p>
      <table class="intro" border="0" cellpadding="10">
        <tbody>
          <tr>
            <td colspan="2"><b>Files you'll edit:</b></td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/valueIterationAgents.html">valueIterationAgents.py</a></code></td>
            <td>A value iteration agent for solving known MDPs.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/qlearningAgents.html">qlearningAgents.py</a></code></td>
            <td>Q-learning agents for Gridworld, Crawler and Pacman.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/analysis.html">analysis.py</a></code></td>
            <td>A file to put your answers to questions given in the project.</td>
          </tr>
          <tr>
            <td colspan="2"><b>Files you should read but NOT edit:</b></td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/mdp.html">mdp.py</a></code></td>
            <td>Defines methods on general MDPs.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/learningAgents.html">learningAgents.py</a></code></td>
            <td>Defines the base classes <code>ValueEstimationAgent</code> and <code>QLearningAgent</code>, which your agents will extend.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/util.html">util.py</a></code></td>
            <td>Utilities, including <code>util.Counter</code>, which is particularly useful for Q-learners.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/gridworld.html">gridworld.py</a></code></td>
            <td>The Gridworld implementation.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/featureExtractors.html">featureExtractors.py</a></code></td>
            <td>Classes for extracting features on (state,action) pairs. Used for the approximate Q-learning agent (in qlearningAgents.py).</td>
          </tr>
          <tr>
            <td colspan="2"><b>Files you can ignore:</b></td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/environment.html">environment.py</a></code></td>
            <td>Abstract class for general reinforcement learning environments. Used by <code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/gridworld.html">gridworld.py</a></code>.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/graphicsGridworldDisplay.html">graphicsGridworldDisplay.py</a></code></td>
            <td>Gridworld graphical display.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/graphicsUtils.html">graphicsUtils.py</a></code></td>
            <td>Graphics utilities.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/textGridworldDisplay.html">textGridworldDisplay.py</a></code></td>
            <td>Plug-in for the Gridworld text interface.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/crawler.html">crawler.py</a></code></td>
            <td>The crawler code and test harness. You will run this but not edit it.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/graphicsCrawlerDisplay.html">graphicsCrawlerDisplay.py</a></code></td>
            <td>GUI for the crawler robot.</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/autograder.html">autograder.py</a></code></td>
            <td>Project autograder</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/testParser.html">testParser.py</a></code></td>
            <td>Parses autograder test and solution files</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/testClasses.html">testClasses.py</a></code></td>
            <td>General autograding test classes</td>
          </tr>
          <tr>
            <td><code>test_cases/</code></td>
            <td>Directory containing the test cases for each question</td>
          </tr>
          <tr>
            <td><code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/reinforcementTestClasses.html">reinforcementTestClasses.py</a></code></td>
            <td>Project 3 specific autograding test classes</td>
          </tr>
        </tbody>
      </table>
      <p></p>
      <p><strong>Files to Edit and Submit:</strong> You will fill in portions of <code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/valueIterationAgents.html">valueIterationAgents.py</a></code>, <code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/qlearningAgents.html">qlearningAgents.py</a></code>, and <code><a href="https://s3-us-west-2.amazonaws.com/cs188websitecontent/projects/release/reinforcement/v1/001/docs/analysis.html">analysis.py</a></code> during the assignment. You should submit these files with your code and comments. Please <em>do not</em> change the other files in this distribution or submit any of our original files other than these files.</p>
      <p><strong>Evaluation:</strong> Your code will be autograded for technical correctness. Please <em>do not</em>
 change the names of any provided functions or classes within the code, 
or you will wreak havoc on the autograder. However, the correctness of 
your implementation -- not the autograder's judgements -- will be the 
final judge of your score. If necessary, we will review and grade 
assignments individually to ensure that you receive due credit for your 
work.</p>
      <p><strong>Academic Dishonesty:</strong> We will be checking your 
code against other submissions in the class for logical redundancy. If 
you copy someone else's code and submit it with minor changes, we will 
know. These cheat detectors are quite hard to fool, so please don't try.
 We trust you all to submit your own work only; <em>please</em> don't let us down. If you do, we will pursue the strongest consequences available to us.</p>
      <p><strong>Getting Help:</strong> You are not alone! If you find 
yourself stuck on something, contact the course staff for help. Office 
hours, section, and the discussion forum are there for your support; 
please use them. If you can't make our office hours, let us know and we 
will schedule more. We want these projects to be rewarding and 
instructional, not frustrating and demoralizing. But, we don't know when
 or how to help unless you ask.</p>
      <p><strong>Discussion:</strong> Please be careful not to post spoilers.</p>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Welcome"></a>MDPs</h3>
      <p>To get started, run Gridworld in manual control mode, which uses the arrow keys:</p>
      <pre>python gridworld.py -m</pre>
      <p>You will see the two-exit layout from class. The blue dot is the agent. Note that when you press <em>up</em>, the agent only actually moves north 80% of the time. Such is the life of a Gridworld agent!</p>
      <p>You can control many aspects of the simulation. A full list of options is available by running:</p>
      <pre>python gridworld.py -h</pre>
      <p>The default agent moves randomly</p>
      <pre>python gridworld.py -g MazeGrid</pre>
      <p>You should see the random agent bounce around the grid until it happens upon an exit. Not the finest hour for an AI agent.</p>
      <p><em>Note:</em> The Gridworld MDP is such that you first must 
enter a pre-terminal state (the double boxes shown in the GUI) and then 
take the special 'exit' action before the episode actually ends (in the 
true terminal state called <code>TERMINAL_STATE</code>, which is not 
shown in the GUI). If you run an episode manually, your total return may
 be less than you expected, due to the discount rate (<code>-d</code> to change; 0.9 by default).</p>
      <p>Look at the console output that accompanies the graphical output (or use <code>-t</code> for all text). You will be told about each transition the agent experiences (to turn this off, use <code>-q</code>).</p>
      <p>As in Pacman, positions are represented by <code>(x,y)</code> Cartesian coordinates and any arrays are indexed by <code>[x][y]</code>, with <code>'north'</code> being the direction of increasing <code>y</code>, etc. By default, most transitions will receive a reward of zero, though you can change this with the living reward option (<code>-r</code>).</p>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Q1"></a>Question 1 (6 points): Value Iteration</h3>
      <p>Write a value iteration agent in <code>ValueIterationAgent</code>, which has been partially specified for you in <code>valueIterationAgents.py</code>.
 Your value iteration agent is an offline planner, not a reinforcement 
learning agent, and so the relevant training option is the number of 
iterations of value iteration it should run (option <code>-i</code>) in its initial planning phase. <code>ValueIterationAgent</code> takes an MDP on construction and runs value iteration for the specified number of iterations before the constructor returns.</p>
      <p>Value iteration computes k-step estimates of the optimal values, V<sub>k</sub>. In addition to running value iteration, implement the following methods for <code>ValueIterationAgent</code> using V<sub>k</sub>.</p>
      <ul>
        <li><code>computeActionFromValues(state)</code> computes the best action according to the value function given by <code>self.values</code>.</li>
        <li><code>computeQValueFromValues(state, action)</code> returns the Q-value of the (state, action) pair given by the value function given by <code>self.values</code>.</li>
      </ul>
      <p>These quantities are all displayed in the GUI: values are 
numbers in squares, Q-values are numbers in square quarters, and 
policies are arrows out from each square.</p>
      <p><em>Important:</em> Use the "batch" version of value iteration where each vector V<sub>k</sub> is computed from a fixed vector V<sub>k-1</sub>
 (like in lecture), not the "online" version where one single weight 
vector is updated in place. This means that when a state's value is 
updated in iteration k based on the values of its successor states, the 
successor state values used in the value update computation should be 
those from iteration k-1 (even if some of the successor states had 
already been updated in iteration k). The difference is discussed in <a href="http://www.cs.ualberta.ca/%7Esutton/book/ebook/node41.html">Sutton &amp; Barto</a> in the 6th paragraph of chapter 4.1.</p>
      <p><em>Note:</em> A policy synthesized from values of depth k 
(which reflect the next k rewards) will actually reflect the next k+1 
rewards (i.e. you return <span style="color: inherit;" class="MathJax_Preview"></span><span role="presentation" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;&amp;#x03C0;&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" style="position: relative;" tabindex="0" id="MathJax-Element-1-Frame" class="MathJax"><nobr aria-hidden="true"><span style="width: 2.188em; display: inline-block;" role="math" id="MathJax-Span-1" class="math"><span style="display: inline-block; position: relative; width: 1.72em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(0.366em, 1001.72em, 1.369em, -1000em); top: -0.992em; left: 0em;"><span id="MathJax-Span-2" class="mrow"><span id="MathJax-Span-3" class="msubsup"><span style="display: inline-block; position: relative; width: 1.743em; height: 0px;"><span style="position: absolute; clip: rect(3.342em, 1000.54em, 4.185em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-4" class="mi">&#960;<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.032em;"></span></span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -3.818em; left: 0.504em;"><span id="MathJax-Span-5" class="texatom"><span id="MathJax-Span-6" class="mrow"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-7" class="mi">k<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.012em;"></span></span><span style="font-size: 70.7%; font-family: STIXGeneral;" id="MathJax-Span-8" class="mo">+</span><span style="font-size: 70.7%; font-family: STIXGeneral;" id="MathJax-Span-9" class="mn">1</span></span></span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 0.992em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 0.931em;"></span></span></nobr><span role="presentation" class="MJX_Assistive_MathML"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>&#960;</mi><mrow class="MJX-TeXAtom-ORD"><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></math></span></span><script id="MathJax-Element-1" type="math/tex">\pi_{k+1}</script>). Similarly, the Q-values will also reflect one more reward than the values (i.e. you return Q<sub>k+1</sub>).</p>
      <p>You should return the synthesized policy <span style="color: inherit;" class="MathJax_Preview"></span><span role="presentation" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;&amp;#x03C0;&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" style="position: relative;" tabindex="0" id="MathJax-Element-2-Frame" class="MathJax"><nobr aria-hidden="true"><span style="width: 2.188em; display: inline-block;" role="math" id="MathJax-Span-10" class="math"><span style="display: inline-block; position: relative; width: 1.72em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(0.366em, 1001.72em, 1.369em, -1000em); top: -0.992em; left: 0em;"><span id="MathJax-Span-11" class="mrow"><span id="MathJax-Span-12" class="msubsup"><span style="display: inline-block; position: relative; width: 1.743em; height: 0px;"><span style="position: absolute; clip: rect(3.342em, 1000.54em, 4.185em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-13" class="mi">&#960;<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.032em;"></span></span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -3.818em; left: 0.504em;"><span id="MathJax-Span-14" class="texatom"><span id="MathJax-Span-15" class="mrow"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-16" class="mi">k<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.012em;"></span></span><span style="font-size: 70.7%; font-family: STIXGeneral;" id="MathJax-Span-17" class="mo">+</span><span style="font-size: 70.7%; font-family: STIXGeneral;" id="MathJax-Span-18" class="mn">1</span></span></span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 0.992em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 0.931em;"></span></span></nobr><span role="presentation" class="MJX_Assistive_MathML"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>&#960;</mi><mrow class="MJX-TeXAtom-ORD"><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></math></span></span><script id="MathJax-Element-2" type="math/tex">\pi_{k+1}</script>.</p>
      <p><em>Hint:</em> Use the <code>util.Counter</code> class in <code>util.py</code>, which is a dictionary with a default value of zero. Methods such as <code>totalCount</code> should simplify your code. However, be careful with <code>argMax</code>: the actual argmax you want may be a key not in the counter!</p>
      <p><em>Note:</em> Make sure to handle the case when a state has no available actions in an MDP (think about what this means for future rewards).</p>
      <p>To test your implementation, run the autograder:</p>
      <pre>python autograder.py -q q1</pre>
      <p>The following command loads your <code>ValueIterationAgent</code>,
 which will compute a policy and execute it 10 times. Press a key to 
cycle through values, Q-values, and the simulation. You should find that
 the value of the start state (<code>V(start)</code>, which you can read
 off of the GUI) and the empirical resulting average reward (printed 
after the 10 rounds of execution finish) are quite close.</p>
      <pre>python gridworld.py -a value -i 100 -k 10</pre>
      <p><em>Hint:</em> On the default BookGrid, running value iteration for 5 iterations should give you this output:</p>
      <pre>python gridworld.py -a value -i 5</pre>
      <center><img src="berkeley_gridworld_examples_files/value.png" alt="value iteration with k=5" width="50%"></center>
      <p><em>Grading:</em> Your value iteration agent will be graded on a
 new grid. We will check your values, Q-values, and policies after fixed
 numbers of iterations and at convergence (e.g. after 100 iterations).</p>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Q2"></a>Question 2 (1 point): Bridge Crossing Analysis</h3>
      <p><code>BridgeGrid</code> is a grid world map with the a 
low-reward terminal state and a high-reward terminal state separated by a
 narrow "bridge", on either side of which is a chasm of high negative 
reward. The agent starts near the low-reward state. With the default 
discount of 0.9 and the default noise of 0.2, the optimal policy does 
not cross the bridge. Change only ONE of the discount and noise 
parameters so that the optimal policy causes the agent to attempt to 
cross the bridge. Put your answer in <code>question2()</code> of <code>analysis.py</code>.
 (Noise refers to how often an agent ends up in an unintended successor 
state when they perform an action.) The default corresponds to:</p>
      <pre>python gridworld.py -a value -i 100 -g BridgeGrid --discount 0.9 --noise 0.2</pre>
      <center><img src="berkeley_gridworld_examples_files/value-q2.png" alt="value iteration with k=100" width="50%"></center>
      <p><em>Grading:</em> We will check that you only changed one of 
the given parameters, and that with this change, a correct value 
iteration agent should cross the bridge. To check your answer, run the 
autograder:</p>
      <pre>python autograder.py -q q2</pre>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Q3"></a>Question 3 (5 points): Policies</h3>
      <p>Consider the <code>DiscountGrid</code> layout, shown below. 
This grid has two terminal states with positive payoff (in the middle 
row), a close exit with payoff +1 and a distant exit with payoff +10. 
The bottom row of the grid consists of terminal states with negative 
payoff (shown in red); each state in this "cliff" region has payoff -10.
 The starting state is the yellow square. We distinguish between two 
types of paths: (1) paths that "risk the cliff" and travel near the 
bottom row of the grid; these paths are shorter but risk earning a large
 negative payoff, and are represented by the red arrow in the figure 
below. (2) paths that "avoid the cliff" and travel along the top edge of
 the grid. These paths are longer but are less likely to incur huge 
negative payoffs. These paths are represented by the green arrow in the 
figure below.</p>
      <center><img src="berkeley_gridworld_examples_files/discountgrid.png" alt="DiscountGrid" width="50%"></center>
      <p>In this question, you will choose settings of the discount, 
noise, and living reward parameters for this MDP to produce optimal 
policies of several different types. Your setting of the parameter 
values for each part should have the property that, if your agent 
followed its optimal policy without being subject to any noise, it would
 exhibit the given behavior. If a particular behavior is not achieved 
for any setting of the parameters, assert that the policy is impossible 
by returning the string <code>'NOT POSSIBLE'</code>.</p>
      <p>Here are the optimal policy types you should attempt to produce:</p>
      <ol type="a"><ol type="a">
        <li>Prefer the close exit (+1), risking the cliff (-10)</li>
        <li>Prefer the close exit (+1), but avoiding the cliff (-10)</li>
        <li>Prefer the distant exit (+10), risking the cliff (-10)</li>
        <li>Prefer the distant exit (+10), avoiding the cliff (-10)</li>
        <li>Avoid both exits and the cliff (so an episode should never terminate)</li>
      </ol></ol>
      <p></p>
      <p>To check your answers, run the autograder:</p>
      <pre>python autograder.py -q q3</pre>
      <p><code>question3a()</code> through <code>question3e()</code> should each return a 3-item tuple of (discount, noise, living reward) in <code>analysis.py</code>.</p>
      <p><em>Note:</em> You can check your policies in the GUI. For 
example, using a correct answer to 3(a), the arrow in (0,1) should point
 east, the arrow in (1,1) should also point east, and the arrow in (2,1)
 should point north.</p>
      <p><em>Note:</em> On some machines you may not see an arrow. In 
this case, press a button on the keyboard to switch to qValue display, 
and mentally calculate the policy by taking the arg max of the available
 qValues for each state.</p>
      <p><em>Grading:</em> We will check that the desired policy is returned in each case.</p>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Q4"></a>Question 4 (5 points): Q-Learning</h3>
      <p>Note that your value iteration agent does not actually learn 
from experience. Rather, it ponders its MDP model to arrive at a 
complete policy before ever interacting with a real environment. When it
 does interact with the environment, it simply follows the precomputed 
policy (e.g. it becomes a reflex agent). This distinction may be subtle 
in a simulated environment like a Gridword, but it's very important in 
the real world, where the real MDP is not available.</p>
      <p>You will now write a Q-learning agent, which does very little 
on construction, but instead learns by trial and error from interactions
 with the environment through its <code>update(state, action, nextState, reward)</code> method. A stub of a Q-learner is specified in <code>QLearningAgent</code> in <code>qlearningAgents.py</code>, and you can select it with the option <code>'-a q'</code>. For this question, you must implement the <code>update</code>, <code>computeValueFromQValues</code>, <code>getQValue</code>, and <code>computeActionFromQValues</code> methods.</p>
      <p><em>Note:</em> For <code>computeActionFromQValues</code>, you should break ties randomly for better behavior. The <code>random.choice()</code> function will help. In a particular state, actions that your agent <em>hasn't</em> seen before still have a Q-value, specifically a Q-value of zero, and if all of the actions that your agent <em>has</em> seen before have a negative Q-value, an unseen action may be optimal.</p>
      <p><em>Important:</em> Make sure that in your <code>computeValueFromQValues</code> and <code>computeActionFromQValues</code> functions, you only access Q values by calling <code>getQValue</code> . This abstraction will be useful for question 8 when you override <code>getQValue</code> to use features of state-action pairs rather than state-action pairs directly.</p>
      <p>With the Q-learning update in place, you can watch your Q-learner learn under manual control, using the keyboard:</p>
      <pre>python gridworld.py -a q -k 5 -m</pre>
      <p>Recall that <code>-k</code> will control the number of episodes
 your agent gets to learn. Watch how the agent learns about the state it
 was just in, not the one it moves to, and "leaves learning in its 
wake." Hint: to help with debugging, you can turn off noise by using the
 <code>--noise 0.0</code> parameter (though this obviously makes 
Q-learning less interesting). If you manually steer Pacman north and 
then east along the optimal path for four episodes, you should see the 
following Q-values: </p>
      <center><img src="berkeley_gridworld_examples_files/q-learning.png" alt="QLearning" width="50%"></center>
      <p></p>
      <p><em>Grading:</em> We will run your Q-learning agent and check 
that it learns the same Q-values and policy as our reference 
implementation when each is presented with the same set of examples. To 
grade your implementation, run the autograder:</p>
      <pre>python autograder.py -q q4</pre>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Q5"></a>Question 5 (3 points): Epsilon Greedy</h3>
      <p>Complete your Q-learning agent by implementing epsilon-greedy action selection in <code>getAction</code>,
 meaning it chooses random actions an epsilon fraction of the time, and 
follows its current best Q-values otherwise. Note that choosing a random
 action may result in choosing the best action - that is, you should not
 choose a random sub-optimal action, but rather <i>any</i> random legal action.</p>
      <pre>python gridworld.py -a q -k 100 </pre>
      <p>Your final Q-values should resemble those of your value 
iteration agent, especially along well-traveled paths. However, your 
average returns will be lower than the Q-values predict because of the 
random actions and the initial learning phase.</p>
      <p>You can choose an element from a list uniformly at random by calling the <code>random.choice</code> function. You can simulate a binary variable with probability <code>p</code> of success by using <code>util.flipCoin(p)</code>, which returns <code>True</code> with probability <code>p</code> and <code>False</code> with probability <code>1-p</code>.</p>
      <p>To test your implementation, run the autograder:</p>
      <pre>python autograder.py -q q5</pre>
      <p>With no additional code, you should now be able to run a Q-learning crawler robot:</p>
      <pre>python crawler.py</pre>
      <p>If this doesn't work, you've probably written some code too specific to the <code>GridWorld</code> problem and you should make it more general to all MDPs.</p>
      <p>This will invoke the crawling robot from class using your 
Q-learner. Play around with the various learning parameters to see how 
they affect the agent's policies and actions. Note that the step delay 
is a parameter of the simulation, whereas the learning rate and epsilon 
are parameters of your learning algorithm, and the discount factor is a 
property of the environment.</p>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Q6"></a>Question 6 (1 point): Bridge Crossing Revisited</h3>
      <p>First, train a completely random Q-learner with the default 
learning rate on the noiseless BridgeGrid for 50 episodes and observe 
whether it finds the optimal policy.</p>
      <pre>python gridworld.py -a q -k 50 -n 0 -g BridgeGrid -e 1</pre>
      <p>Now try the same experiment with an epsilon of 0. Is there an 
epsilon and a learning rate for which it is highly likely (greater than 
99%) that the optimal policy will be learned after 50 iterations? <code>question6()</code> in <code>analysis.py</code> should return EITHER a 2-item tuple of <code>(epsilon, learning rate)</code> OR the string <code>'NOT POSSIBLE'</code> if there is none. Epsilon is controlled by <code>-e</code>, learning rate by <code>-l</code>.</p>
      <p><em>Note:</em> Your response should be not depend on the exact 
tie-breaking mechanism used to choose actions. This means your answer 
should be correct even if for instance we rotated the entire bridge grid
 world 90 degrees.</p>
      <p>To grade your answer, run the autograder:</p>
      <pre>python autograder.py -q q6</pre>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Q7"></a>Question 7 (1 point): Q-Learning and Pacman</h3>
      <p>Time to play some Pacman! Pacman will play games in two phases. In the first phase, <em>training</em>,
 Pacman will begin to learn about the values of positions and actions. 
Because it takes a very long time to learn accurate Q-values even for 
tiny grids, Pacman's training games run in quiet mode by default, with 
no GUI (or console) display. Once Pacman's training is complete, he will
 enter <em>testing</em> mode. When testing, Pacman's <code>self.epsilon</code> and <code>self.alpha</code>
 will be set to 0.0, effectively stopping Q-learning and disabling 
exploration, in order to allow Pacman to exploit his learned policy. 
Test games are shown in the GUI by default. Without any code changes you
 should be able to run Q-learning Pacman for very tiny grids as follows:</p>
      <pre>python pacman.py -p PacmanQAgent -x 2000 -n 2010 -l smallGrid </pre>
      <p>Note that <code>PacmanQAgent</code> is already defined for you in terms of the <code>QLearningAgent</code> you've already written. <code>PacmanQAgent</code> is only different in that it has default learning parameters that are more effective for the Pacman problem (<code>epsilon=0.05, alpha=0.2, gamma=0.8</code>).
 You will receive full credit for this question if the command above 
works without exceptions and your agent wins at least 80% of the time. 
The autograder will run 100 test games after the 2000 training games.</p>
      <p><em>Hint:</em> If your <code>QLearningAgent</code> works for <code>gridworld.py</code> and <code>crawler.py</code> but does not seem to be learning a good policy for Pacman on <code>smallGrid</code>, it may be because your <code>getAction</code> and/or <code>computeActionFromQValues</code>
 methods do not in some cases properly consider unseen actions. In 
particular, because unseen actions have by definition a Q-value of zero,
 if all of the actions that <em>have</em> been seen have negative Q-values, an unseen action may be optimal. Beware of the argmax function from util.Counter!</p>
      <p><em>Note:</em> To grade your answer, run:</p>
      <pre>python autograder.py -q q7</pre>
      <p><em>Note:</em> If you want to experiment with learning parameters, you can use the option <code>-a</code>, for example <code>-a epsilon=0.1,alpha=0.3,gamma=0.7</code>. These values will then be accessible as <code>self.epsilon, self.gamma</code> and <code>self.alpha</code> inside the agent.</p>
      <p><em>Note:</em> While a total of 2010 games will be played, the first 2000 games will not be displayed because of the option <code>-x 2000</code>,
 which designates the first 2000 games for training (no output). Thus, 
you will only see Pacman play the last 10 of these games. The number of 
training games is also passed to your agent as the option <code>numTraining</code>.</p>
      <p><em>Note:</em> If you want to watch 10 training games to see what's going on, use the command:</p>
      <pre>python pacman.py -p PacmanQAgent -n 10 -l smallGrid -a numTraining=10</pre>
      <p>During training, you will see output every 100 games with 
statistics about how Pacman is faring. Epsilon is positive during 
training, so Pacman will play poorly even after having learned a good 
policy: this is because he occasionally makes a random exploratory move 
into a ghost. As a benchmark, it should take between 1,000 and 1400 
games before Pacman's rewards for a 100 episode segment becomes 
positive, reflecting that he's started winning more than losing. By the 
end of training, it should remain positive and be fairly high (between 
100 and 350).</p>
      <p>Make sure you understand what is happening here: the MDP state is the <em>exact</em>
 board configuration facing Pacman, with the now complex transitions 
describing an entire ply of change to that state. The intermediate game 
configurations in which Pacman has moved but the ghosts have not replied
 are <em>not</em> MDP states, but are bundled in to the transitions.</p>
      <p>Once Pacman is done training, he should win very reliably in 
test games (at least 90% of the time), since now he is exploiting his 
learned policy.</p>
      <p>However, you will find that training the same agent on the seemingly simple <code>mediumGrid</code>
 does not work well. In our implementation, Pacman's average training 
rewards remain negative throughout training. At test time, he plays 
badly, probably losing all of his test games. Training will also take a 
long time, despite its ineffectiveness.</p>
      <p>Pacman fails to win on larger layouts because each board 
configuration is a separate state with separate Q-values. He has no way 
to generalize that running into a ghost is bad for all positions. 
Obviously, this approach will not scale.</p>
    </div>

    <hr>

    <div class="project">
      <h3><a name="Q8"></a>Question 8 (3 points): Approximate Q-Learning</h3>
      <p>Implement an approximate Q-learning agent that learns weights 
for features of states, where many states might share the same features.
 Write your implementation in <code>ApproximateQAgent</code> class in <code>qlearningAgents.py</code>, which is a subclass of <code>PacmanQAgent</code>.</p>
      <p><em>Note:</em> Approximate Q-learning assumes the existence of a feature function f(s,a) over state and action pairs, which yields a vector f<sub>1</sub>(s,a) .. f<sub>i</sub>(s,a) .. f<sub>n</sub>(s,a) of feature values. We provide feature functions for you in <code>featureExtractors.py</code>. Feature vectors are <code>util.Counter</code> (like a dictionary) objects containing the non-zero pairs of features and values; all omitted features have value zero.</p>
      <p>The approximate Q-function takes the following form</p>
      <center><span style="color: inherit;" class="MathJax_Preview"></span><span role="presentation" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munderover&gt;&lt;mo movablelimits=&quot;false&quot;&gt;&amp;#x2211;&lt;/mo&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/munderover&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" style="position: relative;" tabindex="0" id="MathJax-Element-3-Frame" class="MathJax"><nobr aria-hidden="true"><span style="width: 11.021em; display: inline-block;" role="math" id="MathJax-Span-19" class="math"><span style="display: inline-block; position: relative; width: 8.73em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(0.917em, 1008.73em, 3.755em, -1000em); top: -2.513em; left: 0em;"><span id="MathJax-Span-20" class="mrow"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-21" class="mi">Q</span><span style="font-family: STIXGeneral;" id="MathJax-Span-22" class="mo">(</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-23" class="mi">s</span><span style="font-family: STIXGeneral;" id="MathJax-Span-24" class="mo">,</span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;" id="MathJax-Span-25" class="mi">a</span><span style="font-family: STIXGeneral;" id="MathJax-Span-26" class="mo">)</span><span style="font-family: STIXGeneral; padding-left: 0.313em;" id="MathJax-Span-27" class="mo">=</span><span style="padding-left: 0.313em;" id="MathJax-Span-28" class="munderover"><span style="display: inline-block; position: relative; width: 1.034em; height: 0px;"><span style="position: absolute; clip: rect(3.009em, 1000.86em, 4.428em, -1000em); top: -3.968em; left: 0.06em;"><span style="font-family: STIXGeneral; vertical-align: -0.002em;" id="MathJax-Span-29" class="mo">&#8721;</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; clip: rect(3.292em, 1000.96em, 4.274em, -1000em); top: -3.032em; left: 0em;"><span id="MathJax-Span-30" class="texatom"><span id="MathJax-Span-31" class="mrow"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-32" class="mi">i</span><span style="font-size: 70.7%; font-family: STIXGeneral;" id="MathJax-Span-33" class="mo">=</span><span style="font-size: 70.7%; font-family: STIXGeneral;" id="MathJax-Span-34" class="mn">1</span></span></span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; clip: rect(3.358em, 1000.34em, 4.173em, -1000em); top: -4.954em; left: 0.34em;"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-35" class="mi">n</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span><span style="padding-left: 0.188em;" id="MathJax-Span-36" class="msubsup"><span style="display: inline-block; position: relative; width: 0.55em; height: 0px;"><span style="position: absolute; clip: rect(3.092em, 1000.42em, 4.374em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-37" class="mi">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.146em;"></span></span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -3.818em; left: 0.278em;"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-38" class="mi">i</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span><span style="font-family: STIXGeneral;" id="MathJax-Span-39" class="mo">(</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-40" class="mi">s</span><span style="font-family: STIXGeneral;" id="MathJax-Span-41" class="mo">,</span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;" id="MathJax-Span-42" class="mi">a</span><span style="font-family: STIXGeneral;" id="MathJax-Span-43" class="mo">)</span><span id="MathJax-Span-44" class="msubsup"><span style="display: inline-block; position: relative; width: 0.939em; height: 0px;"><span style="position: absolute; clip: rect(3.329em, 1000.65em, 4.185em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-45" class="mi">w</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -3.818em; left: 0.667em;"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-46" class="mi">i</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.513em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -1.398em; border-left: 0px solid; width: 0px; height: 3.243em;"></span></span></nobr><span role="presentation" class="MJX_Assistive_MathML"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Q</mi><mo stretchy="false">(</mo><mi>s</mi><mo>,</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo movablelimits="false">&#8721;</mo><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>f</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo>,</mo><mi>a</mi><mo stretchy="false">)</mo><msub><mi>w</mi><mi>i</mi></msub></math></span></span><script id="MathJax-Element-3" type="math/tex">Q(s,a) = \sum\limits_{i=1}^n f_i(s,a) w_i </script></center>
      <p><br> where each weight w<sub>i</sub> is associated with a particular feature f<sub>i</sub>(s,a).
 In your code, you should implement the weight vector as a dictionary 
mapping features (which the feature extractors will return) to weight 
values. You will update your weight vectors similarly to how you updated
 Q-values:</p>
      <center><span style="color: inherit;" class="MathJax_Preview"></span><span role="presentation" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;&amp;#x2190;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;&amp;#x03B1;&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" style="position: relative;" tabindex="0" id="MathJax-Element-4-Frame" class="MathJax"><nobr aria-hidden="true"><span style="width: 17.188em; display: inline-block;" role="math" id="MathJax-Span-47" class="math"><span style="display: inline-block; position: relative; width: 13.624em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(1.632em, 1013.58em, 2.919em, -1000em); top: -2.513em; left: 0em;"><span id="MathJax-Span-48" class="mrow"><span id="MathJax-Span-49" class="msubsup"><span style="display: inline-block; position: relative; width: 0.939em; height: 0px;"><span style="position: absolute; clip: rect(3.329em, 1000.65em, 4.185em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-50" class="mi">w</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -3.818em; left: 0.667em;"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-51" class="mi">i</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span><span style="font-family: STIXGeneral; padding-left: 0.313em;" id="MathJax-Span-52" class="mo">&#8592;</span><span style="padding-left: 0.313em;" id="MathJax-Span-53" class="msubsup"><span style="display: inline-block; position: relative; width: 0.939em; height: 0px;"><span style="position: absolute; clip: rect(3.329em, 1000.65em, 4.185em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-54" class="mi">w</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -3.818em; left: 0.667em;"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-55" class="mi">i</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span><span style="font-family: STIXGeneral; padding-left: 0.25em;" id="MathJax-Span-56" class="mo">+</span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;" id="MathJax-Span-57" class="mi">&#945;</span><span style="font-family: STIXGeneral; padding-left: 0.25em;" id="MathJax-Span-58" class="mo">&#8901;</span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;" id="MathJax-Span-59" class="mi">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.027em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-60" class="mi">i</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-61" class="mi">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.146em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-62" class="mi">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.146em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-63" class="mi">e</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-64" class="mi">r<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.023em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-65" class="mi">e</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-66" class="mi">n</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-67" class="mi">c</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-68" class="mi">e</span><span style="font-family: STIXGeneral; padding-left: 0.25em;" id="MathJax-Span-69" class="mo">&#8901;</span><span style="padding-left: 0.25em;" id="MathJax-Span-70" class="msubsup"><span style="display: inline-block; position: relative; width: 0.55em; height: 0px;"><span style="position: absolute; clip: rect(3.092em, 1000.42em, 4.374em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-71" class="mi">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.146em;"></span></span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -3.818em; left: 0.278em;"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-72" class="mi">i</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span><span style="font-family: STIXGeneral;" id="MathJax-Span-73" class="mo">(</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-74" class="mi">s</span><span style="font-family: STIXGeneral;" id="MathJax-Span-75" class="mo">,</span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;" id="MathJax-Span-76" class="mi">a</span><span style="font-family: STIXGeneral;" id="MathJax-Span-77" class="mo">)</span></span><span style="display: inline-block; width: 0px; height: 2.513em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.344em; border-left: 0px solid; width: 0px; height: 1.288em;"></span></span></nobr><span role="presentation" class="MJX_Assistive_MathML"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>w</mi><mi>i</mi></msub><mo stretchy="false">&#8592;</mo><msub><mi>w</mi><mi>i</mi></msub><mo>+</mo><mi>&#945;</mi><mo>&#8901;</mo><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>&#8901;</mo><msub><mi>f</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo>,</mo><mi>a</mi><mo stretchy="false">)</mo></math></span></span><script id="MathJax-Element-4" type="math/tex">w_i \leftarrow w_i + \alpha \cdot difference \cdot f_i(s,a) </script></center><center><span style="color: inherit;" class="MathJax_Preview"></span><span role="presentation" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;&amp;#x03B3;&lt;/mi&gt;&lt;munder&gt;&lt;mo form=&quot;prefix&quot;&gt;max&lt;/mo&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;&amp;#x2032;&lt;/mo&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/munder&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;&amp;#x2032;&lt;/mo&gt;&lt;/msup&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;&amp;#x2032;&lt;/mo&gt;&lt;/msup&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" style="position: relative;" tabindex="0" id="MathJax-Element-5-Frame" class="MathJax"><nobr aria-hidden="true"><span style="width: 22.354em; display: inline-block;" role="math" id="MathJax-Span-78" class="math"><span style="display: inline-block; position: relative; width: 17.725em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(1.552em, 1017.68em, 3.572em, -1000em); top: -2.513em; left: 0em;"><span id="MathJax-Span-79" class="mrow"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-80" class="mi">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.027em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-81" class="mi">i</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-82" class="mi">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.146em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-83" class="mi">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.146em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-84" class="mi">e</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-85" class="mi">r<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.023em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-86" class="mi">e</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-87" class="mi">n</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-88" class="mi">c</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-89" class="mi">e</span><span style="font-family: STIXGeneral; padding-left: 0.313em;" id="MathJax-Span-90" class="mo">=</span><span style="font-family: STIXGeneral; padding-left: 0.313em;" id="MathJax-Span-91" class="mo">(</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-92" class="mi">r<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.023em;"></span></span><span style="font-family: STIXGeneral; padding-left: 0.25em;" id="MathJax-Span-93" class="mo">+</span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;" id="MathJax-Span-94" class="mi">&#947;<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.028em;"></span></span><span style="padding-left: 0.188em;" id="MathJax-Span-95" class="munderover"><span style="display: inline-block; position: relative; width: 1.722em; height: 0px;"><span style="position: absolute; clip: rect(3.31em, 1001.7em, 4.177em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral;" id="MathJax-Span-96" class="mo">max</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; clip: rect(3.214em, 1000.59em, 4.274em, -1000em); top: -3.215em; left: 0.567em;"><span id="MathJax-Span-97" class="texatom"><span id="MathJax-Span-98" class="mrow"><span id="MathJax-Span-99" class="msup"><span style="display: inline-block; position: relative; width: 0.587em; height: 0px;"><span style="position: absolute; clip: rect(3.458em, 1000.34em, 4.174em, -1000em); top: -3.968em; left: 0em;"><span style="font-size: 70.7%; font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-100" class="mi">a</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -4.225em; left: 0.354em;"><span style="font-size: 52.9%; font-family: STIXVariants;" id="MathJax-Span-101" class="mo">&#8242;</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;" id="MathJax-Span-102" class="mi">Q</span><span style="font-family: STIXGeneral;" id="MathJax-Span-103" class="mo">(</span><span id="MathJax-Span-104" class="msup"><span style="display: inline-block; position: relative; width: 0.704em; height: 0px;"><span style="position: absolute; clip: rect(3.328em, 1000.37em, 4.18em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-105" class="mi">s</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -4.331em; left: 0.389em;"><span style="font-size: 70.7%; font-family: STIXVariants;" id="MathJax-Span-106" class="mo">&#8242;</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span><span style="font-family: STIXGeneral;" id="MathJax-Span-107" class="mo">,</span><span style="padding-left: 0.188em;" id="MathJax-Span-108" class="msup"><span style="display: inline-block; position: relative; width: 0.816em; height: 0px;"><span style="position: absolute; clip: rect(3.329em, 1000.48em, 4.178em, -1000em); top: -3.968em; left: 0em;"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-109" class="mi">a</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span><span style="position: absolute; top: -4.331em; left: 0.501em;"><span style="font-size: 70.7%; font-family: STIXVariants;" id="MathJax-Span-110" class="mo">&#8242;</span><span style="display: inline-block; width: 0px; height: 3.968em;"></span></span></span></span><span style="font-family: STIXGeneral;" id="MathJax-Span-111" class="mo">)</span><span style="font-family: STIXGeneral;" id="MathJax-Span-112" class="mo">)</span><span style="font-family: STIXGeneral; padding-left: 0.25em;" id="MathJax-Span-113" class="mo">&#8722;</span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;" id="MathJax-Span-114" class="mi">Q</span><span style="font-family: STIXGeneral;" id="MathJax-Span-115" class="mo">(</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-116" class="mi">s</span><span style="font-family: STIXGeneral;" id="MathJax-Span-117" class="mo">,</span><span style="font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;" id="MathJax-Span-118" class="mi">a</span><span style="font-family: STIXGeneral;" id="MathJax-Span-119" class="mo">)</span></span><span style="display: inline-block; width: 0px; height: 2.513em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -1.168em; border-left: 0px solid; width: 0px; height: 2.212em;"></span></span></nobr><span role="presentation" class="MJX_Assistive_MathML"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mo>+</mo><mi>&#947;</mi><munder><mo form="prefix">max</mo><mrow class="MJX-TeXAtom-ORD"><msup><mi>a</mi><mo>&#8242;</mo></msup></mrow></munder><mi>Q</mi><mo stretchy="false">(</mo><msup><mi>s</mi><mo>&#8242;</mo></msup><mo>,</mo><msup><mi>a</mi><mo>&#8242;</mo></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>&#8722;</mo><mi>Q</mi><mo stretchy="false">(</mo><mi>s</mi><mo>,</mo><mi>a</mi><mo stretchy="false">)</mo></math></span></span><script id="MathJax-Element-5" type="math/tex"> difference = (r + \gamma \max\limits_{a'} Q(s', a')) - Q(s,a) </script></center>
      <p><br> Note that the <span style="color: inherit;" class="MathJax_Preview"></span><span role="presentation" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/math&gt;" style="position: relative;" tabindex="0" id="MathJax-Element-6-Frame" class="MathJax"><nobr aria-hidden="true"><span style="width: 5.521em; display: inline-block;" role="math" id="MathJax-Span-120" class="math"><span style="display: inline-block; position: relative; width: 4.365em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(1.632em, 1004.33em, 2.919em, -1000em); top: -2.513em; left: 0em;"><span id="MathJax-Span-121" class="mrow"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-122" class="mi">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.027em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-123" class="mi">i</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-124" class="mi">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.146em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-125" class="mi">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.146em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-126" class="mi">e</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-127" class="mi">r<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.023em;"></span></span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-128" class="mi">e</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-129" class="mi">n</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-130" class="mi">c</span><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-131" class="mi">e</span></span><span style="display: inline-block; width: 0px; height: 2.513em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.344em; border-left: 0px solid; width: 0px; height: 1.288em;"></span></span></nobr><span role="presentation" class="MJX_Assistive_MathML"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi></math></span></span><script id="MathJax-Element-6" type="math/tex">difference</script> term is the same as in normal Q-learning, and <span style="color: inherit;" class="MathJax_Preview"></span><span role="presentation" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/math&gt;" style="position: relative;" tabindex="0" id="MathJax-Element-7-Frame" class="MathJax"><nobr aria-hidden="true"><span style="width: 0.521em; display: inline-block;" role="math" id="MathJax-Span-132" class="math"><span style="display: inline-block; position: relative; width: 0.397em; height: 0px; font-size: 126%;"><span style="position: absolute; clip: rect(1.874em, 1000.4em, 2.712em, -1000em); top: -2.513em; left: 0em;"><span id="MathJax-Span-133" class="mrow"><span style="font-family: STIXGeneral; font-style: italic;" id="MathJax-Span-134" class="mi">r<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.023em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.513em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.083em; border-left: 0px solid; width: 0px; height: 0.722em;"></span></span></nobr><span role="presentation" class="MJX_Assistive_MathML"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi></math></span></span><script id="MathJax-Element-7" type="math/tex"> r </script> is the experienced reward.</p>
      <p>By default, <code>ApproximateQAgent</code> uses the <code>IdentityExtractor</code>, which assigns a single feature to every <code>(state,action)</code> pair. With this feature extractor, your approximate Q-learning agent should work identically to <code>PacmanQAgent</code>. You can test this with the following command:</p>
      <pre>python pacman.py -p ApproximateQAgent -x 2000 -n 2010 -l smallGrid </pre>
      <p><em>Important:</em><code>ApproximateQAgent</code> is a subclass of <code>QLearningAgent</code>, and it therefore shares several methods like <code>getAction</code>. Make sure that your methods in <code>QLearningAgent</code> call <code>getQValue</code> instead of accessing Q-values directly, so that when you override <code>getQValue</code> in your approximate agent, the new approximate q-values are used to compute actions.</p>
      <p>Once you're confident that your approximate learner works 
correctly with the identity features, run your approximate Q-learning 
agent with our custom feature extractor, which can learn to win with 
ease:</p>
      <pre>python pacman.py -p ApproximateQAgent -a extractor=SimpleExtractor -x 50 -n 60 -l mediumGrid </pre>
      <p>Even much larger layouts should be no problem for your <code>ApproximateQAgent</code>. (<em>warning</em>: this may take a few minutes to train)</p>
      <pre>python pacman.py -p ApproximateQAgent -a extractor=SimpleExtractor -x 50 -n 60 -l mediumClassic </pre>
      <p>If you have no errors, your approximate Q-learning agent should
 win almost every time with these simple features, even with only 50 
training games.</p>
      <p><em>Grading:</em> We will run your approximate Q-learning agent
 and check that it learns the same Q-values and feature weights as our 
reference implementation when each is presented with the same set of 
examples. To grade your implementation, run the autograder:</p>
      <pre>python autograder.py -q q8</pre>
      <p><i>Congratulations! You have a learning Pacman agent!</i></p>
    </div>

    <hr>

    <h3>Submission</h3>
    <p>You're not done yet! Follow your instructor's guidelines to receive credit on your project!</p>
  </div>




<div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px none; margin: 0px;"><div style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px none; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-size-adjust: none; font-family: STIXSizeOneSym,sans-serif;" id="MathJax_Font_Test"></div></div></body></html>